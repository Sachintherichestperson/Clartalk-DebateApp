<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ClarTalk</title>
    <link rel="stylesheet" href="./stylesheets/home.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <section class="container">
        <header>
            <div class="branding">
                <img src="/images/nav.png" alt="ClarTalk Logo">
                <div class="search-bar">
                    <i class="fa fa-search Search-icon"></i>
                    <input type="text" placeholder="Search topics, debates..." class="Search-input">
                </div>
            </div>
            <nav class="navigation">
                <a href="/" class="nav-link active">
                    <i class="fas fa-tv"></i> Live
                </a>
                <a href="debate" class="nav-link">
                    <i class="fas fa-comments"></i> Entertainment
                </a>
                <a href="podcast" class="nav-link">
                    <i class="fas fa-podcast"></i> Podcasts
                </a>
                <a href="/community" class="nav-link">
                    <i class="fas fa-users"></i> Community
                </a>
                <a href="/creator/opponent-requests/<%= user._id %>" class="nav-link">
                    <i class="fas fa-envelope"></i> Requests
                </a>
                <a href="/LeaderBoard" class="nav-link">
                    <i class="fas fa-trophy"></i> Leaderboard
                </a>
                <a href="/MUN-competetion" class="nav-link">
                    <i class="fas fa-globe"></i> MUN
                </a>
                <a href="/Chat-Notifications" class="nav-link">
                    <i class="fas fa-bell"></i> Notifications
                </a>
                <a href="/profile" class="nav-link">
                    <i class="fas fa-user"></i> Profile
                </a>
            </nav>
        </header>
        <main class="page">
            <% if (vedios.length > 0) { %>
                <% vedios.forEach(function(vedio) { %>
                    <a href="/live-content-applying-page/<%= vedio._id %>" class="video-card" data-id="<%= vedio._id %>">
                        <img src="data:image/jpeg;base64,<%= vedio.Thumbnail.toString('base64') %>" alt="Video Thumbnail">
                        <div class="video-details">
                            <h3 class="video-title"><%= vedio.title %></h3>
                            <p class="video-time" data-time="<%= vedio.Time %>">Time Left: Calculating...</p>
                            <p class="video-status" style="display: none;">Live</p>
                        </div>
                    </a>
                <% }) %>
            <% } else { %>
                <div class="instruction">
                    No More Videos
                </div>
            <% } %>
        </main>
    </section>
    <div class="banner" style="display: none;">
        <a href="#$">
            <img src="/images/banner.png" alt="" class="banner-image">
        </a>
        <button class="close-button"><i class="fas fa-times"></i></button>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="./javascript/home.js"></script>
    <script type="module">
        // Import Firebase SDKs
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-app.js";
        import { getMessaging, getToken, onMessage } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-messaging.js";

        // Firebase Configuration
        const firebaseConfig = {
            apiKey: process.env.FIREBASE_API_KEY,
    authDomain: process.env.FIREBASE_AUTH_DOMAIN,
    projectId: process.env.FIREBASE_PROJECT_ID,
    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
    appId: process.env.FIREBASE_APP_ID,
    measurementId: process.env.FIREBASE_MEASUREMENT_ID
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const messaging = getMessaging(app);

        // Register Service Worker
        if ("serviceWorker" in navigator) {
            navigator.serviceWorker.register("./firebase-messaging-sw.js")
                .then((registration) => {
                    console.log("Service Worker registered with scope:", registration.scope);
                })
                .catch((error) => {
                    console.error("Service Worker registration failed:", error);
                });
        }

        // Request Permission for Notifications
        function requestPermission() {
            Notification.requestPermission().then(permission => {
                if (permission === "granted") {
                    console.log("Notification permission granted.");
                    getToken(messaging, { vapidKey: "BDhQxlMBmyq4wfmcEu3QXV3k_b7rhPdyoE9C0q3ftnNe_bC9tRnBZpmwBAzj72-9UJcevR9GuYjCXfpd3Y13uiU" })
                        .then((currentToken) => {
                            if (currentToken) {
                                console.log("FCM Token:", currentToken);
                                sendTokenToServer(currentToken);
                            } else {
                                console.log("No registration token available.");
                            }
                        })
                        .catch(err => {
                            console.error("An error occurred while retrieving token.", err);
                        });
                } else {
                    console.log("Notification permission denied.");
                }
            });
        }

        // Expose function globally
        window.requestPermission = requestPermission;

        // Send Token to Server
        function sendTokenToServer(token) {
            fetch("http://localhost:3000/send-notification", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    token: token,
                    title: "Test Notification",
                    body: "This is a test message from Firebase Cloud Messaging!"
                })
            })
            .then(response => response.json())
            .then(data => console.log("Server Response:", data))
            .catch(error => console.error("Error:", error));
        }

        // Handle Foreground Messages
        onMessage(messaging, (payload) => {
            console.log("Message received:", payload);
            new Notification(payload.notification.title, {
                body: payload.notification.body
            });
        });

        window.onload = () => {
            requestPermission();
        };
</script>
</body>
</html>