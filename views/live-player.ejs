<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Video</title>
    <link rel="stylesheet" href="/stylesheets/live-player.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <section>
        <div class="container">
            <div class="player">
                <div class="local-video">
                    <video id="localVideo" autoplay muted playsinline></video>
                </div>
                <div class="remote-video">
                    <label class="comment-btn" for="commentsToggle" id="icon">
                        <i class="fas fa-comment comment-i"></i> 
                    </label>
                    <div id="remoteVideos"></div> <!-- Container for multiple remote videos -->
                    <% if(isCreator || isOpponent){ %>
                        <button class="start-stream-btn">Start Stream</button>
                        <button class="end-call-btn">End Call</button>
                    <% } %>
                </div>
            </div>
            <% if(isViewer){ %>
            <div class="about-video">
                <p class="title"><%= Live.title %></p>
                <div class="description">
                    <p><%= Live.description %></p>
                </div>
            <% } %>
            </div>
            <% if(isViewer){ %>
            <div class="video-user-info">
                <img src="/images/Default.png" alt="Default Avatar" class="user-avatar">
                <div class="creator-details">
                    <a href="/creator/creator" class="creator-name">
                        Creator Username
                    </a>
                    <p class="followers-count"><%= follower %> Followers</p>
                </div>
            <% } %>
                <% if(isViewer){ %>
                <% if (isFollowing) { %>
                    <button class="unfollow" data-creator-id="<%= Live.creator[0]._id %>" id="follow-btn">Unfollow</button>
                <% } else { %>
                    <button class="follow" data-creator-id="<%= Live.creator[0]._id %>" id="follow-btn">Follow</button>
                <% } %>
                <% } %>
            </div> 
        <% if(isViewer){ %>
        <input type="checkbox" id="commentsToggle" class="comments-toggle" hidden>
        <div class="panel">
            <div id="buttons">
                <div>Comments</div>
                <div>Questions</div>
            </div>
            <div class="comments">
                <div class="comment-list">
                    <li class="single-comment">
                        <strong>Krishna tera Shaka : </strong>
                        <p>Me hu Daro Mat Sachin, Tum Bus Mehnat Karte Raho aur mere Priyata ka nam lete Raho, Aur Jo Tum Kar Rahe Ho Wo Karte Raho</p>
                    </li>
                </div>
                <div class="comment-input">
                    <input type="text" placeholder="Add a comment" id="commentInputComments">
                    <button id="commentButtonComments">Comment</button>
                </div>
            </div> 
            <div id="questions">
                <div class="comment-list">
                    <li class="single-question">
                        Me hu Daro Mat Sachin, Tum Bus Mehnat Karte Raho aur mere Priyata ka nam lete Raho, Aur Jo Tum Kar Rahe Ho Wo Karte Raho
                    </li>
                </div>
                <div class="comment-input">
                    <input type="text" placeholder="Ask a question" id="commentInputQuestions">
                    <button id="commentButtonQuestions">Submit</button>
                </div>
            </div>
        </div>
        <% } %>
    </div>
</div>
    </section>
    <script src="/javascript/socket.io.js"></script>
    <script>
        const button = document.querySelector(".start-stream-btn");
        const socket = io(); // Connect to the signaling server
        const configuration = { 
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" }
            ] 
        };
        let localStream = null;
        let peerConnections = {};
        let isStreamer = false; // Default is viewer
        let roomId = "your-room-id"; // Replace with dynamic room ID
        const isViewer = true; // Set to true if the user is a viewer

        // Get user media (streamer's video and audio)
        async function initLocalStream() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                const localVideo = document.getElementById("localVideo");
                localVideo.srcObject = localStream;
                localVideo.play();
                console.log("Local stream initialized.");
            } catch (error) {
                console.error("Error accessing media devices:", error);
            }
        }

        // Create a new RTCPeerConnection for a peer
        function createPeerConnection(peerId) {
            if (peerConnections[peerId]) {
                console.log(`Peer connection for ${peerId} already exists.`);
                return peerConnections[peerId];
            }

            console.log(`Creating peer connection for ${peerId}`);
            const peerConnection = new RTCPeerConnection(configuration);
            peerConnections[peerId] = peerConnection;

            // Attach local stream to the peer connection
            if (localStream) {
                localStream.getTracks().forEach((track) => {
                    peerConnection.addTrack(track, localStream);
                });
            }

            // Handle ICE candidates
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    console.log("Sending ICE candidate:", event.candidate);
                    socket.emit("signal", { data: { candidate: event.candidate }, sender: socket.id, target: peerId });
                }
            };

            // Handle remote tracks
           // Handle remote tracks
peerConnection.ontrack = (event) => {
    console.log("Received remote track for", peerId);

    // Prevent adding the same peer's video multiple times
    if (document.getElementById(`video-${peerId}`)) {
        console.log(`Video for peer ${peerId} already exists.`);
        return;
    }

    const remoteVideo = document.createElement("video");
    remoteVideo.autoplay = true;
    remoteVideo.playsInline = true;
    remoteVideo.id = `video-${peerId}`;
    remoteVideo.srcObject = event.streams[0]; // Assign the remote stream to the video element

    // Append to the remote videos container
    document.getElementById("remoteVideos").appendChild(remoteVideo);
    console.log(`Assigned stream for peer: ${peerId} to a new remoteVideo`);
};


            // Handle ICE connection state changes
            peerConnection.oniceconnectionstatechange = () => {
                if (peerConnection.iceConnectionState === "failed") {
                    console.log("ICE connection failed, restarting ICE...");
                    peerConnection.restartIce();
                }
            };

            return peerConnection;
        }

        // Handle incoming signals (SDP and ICE candidates)
        async function handleSignal({ data, sender }) {
            let peerConnection = peerConnections[sender];
            if (!peerConnection) {
                console.log(`Peer connection for ${sender} does not exist, creating it now.`);
                peerConnection = createPeerConnection(sender);
            }

            if (data.sdp) {
                console.log("Received SDP:", data.sdp.type);
                await peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
                if (data.sdp.type === "offer") {
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    console.log("Sending SDP answer.");
                    socket.emit("signal", { data: { sdp: peerConnection.localDescription }, sender: socket.id, target: sender });
                }
            } else if (data.candidate) {
                console.log("Received ICE candidate.");
                await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
            }
        }

        // Initialize for Streamers
        async function initializeStream() {
            await initLocalStream();
            isStreamer = true;
            socket.emit("start-stream", { roomId }); // Notify the server that the stream has started
        }

        // Initialize for Viewers
        function initializeViewer() {
            isStreamer = false;
            console.log("Viewer joined, setting up local video.");
            socket.emit("join-room", { roomId }); // Viewers join the room
        }

        // Handle user joining
        socket.on("user-joined", (peerId) => {
            console.log("User joined:", peerId);

            // Create a peer connection for the new user
            createPeerConnection(peerId);

            // If this user is the streamer, create an offer for the new peer
            if (isStreamer) {
                createOffer(peerId);
            }
        });

        // Handle stream started (when both streamers are in the room)
        socket.on("stream-started", (peerId) => {
            console.log("Stream started by peer:", peerId);
            if (!peerConnections[peerId]) {
                createPeerConnection(peerId);
                createOffer(peerId);
            }
        });

        // Handle user leaving
        socket.on("user-left", (peerId) => {
            console.log("User left:", peerId);
            if (peerConnections[peerId]) {
                peerConnections[peerId].close();
                delete peerConnections[peerId];
            }
        });

        // Create an offer for a peer
        async function createOffer(peerId) {
            console.log(`Creating offer for ${peerId}`);
            const peerConnection = peerConnections[peerId];
            if (!peerConnection) {
                console.error(`Peer connection for ${peerId} not found!`);
                return;
            }

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            socket.emit("signal", { data: { sdp: peerConnection.localDescription }, sender: socket.id, target: peerId });
        }

        // Handle signal
        socket.on("signal", handleSignal);

        // Event Listeners
        button?.addEventListener("click", () => {
            initializeStream();
        });

        if (isViewer) {
            initializeViewer();
        }
    </script>
     <script>
        document.addEventListener("DOMContentLoaded", function () {
            const commentsSection = document.querySelector(".comments");
            const questionsSection = document.querySelector("#questions");
            const commentsButton = document.querySelector("#buttons div:nth-child(1)");
            const questionsButton = document.querySelector("#buttons div:nth-child(2)");
            const icon = document.getElementById("icon");
        
            commentsButton.addEventListener("click", function () {
                commentsSection.classList.toggle("active");
                questionsSection.classList.remove("active");
            });
        
            questionsButton.addEventListener("click", function () {
                questionsSection.classList.toggle("active");
                commentsSection.classList.remove("active");
            });

            let open = "open"
            icon.addEventListener("click", function () {
                if(open){
                    commentsSection.classList.toggle("accent");
                }else{
                    commentsSection.classList.remove("accent");
                }
            });
        });
    </script>
</body>
</html>